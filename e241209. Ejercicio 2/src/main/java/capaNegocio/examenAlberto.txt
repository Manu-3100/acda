D:\Examen ud1\e241209. Ejercicio 1\src\main\java\capaNegocio\Inventario.java
-------------------------------------------------------------------------------
package capaNegocio;

import java.util.ArrayList;

public class Inventario {

	private ArrayList<Productos> productos;
	private ArrayList<Materiales> materiales;
	
	
	public Inventario() {}
	
	public Inventario(ArrayList<Productos> productos, ArrayList<Materiales> materiales) {
		this.productos = productos;
		this.materiales = materiales;
	}
	
	public ArrayList<Productos> getProductos() {
		return productos;
	}
	public void setProductos(ArrayList<Productos> productos) {
		this.productos = productos;
	}
	public ArrayList<Materiales> getMateriales() {
		return materiales;
	}
	public void setMateriales(ArrayList<Materiales> materiales) {
		this.materiales = materiales;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Inventario productos=")
		.append(productos)
		.append(", materiales=")
		.append(materiales);
		return builder.toString();
	}
	
	
	
	
}

*******************************************************************************
D:\Examen ud1\e241209. Ejercicio 1\src\main\java\capaNegocio\Materiales.java
-------------------------------------------------------------------------------
package capaNegocio;

public class Materiales {

	private String nombre;
	private String unidad;
	private double costoPorUnidad;
	private int stock;
	
	public Materiales() {}
	
	public Materiales(String nombre, String unidad, double costoPorUnidad, int stock) {
		this.nombre = nombre;
		this.unidad = unidad;
		this.costoPorUnidad = costoPorUnidad;
		this.stock = stock;
	}

	public String getNombre() {
		return nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public String getUnidad() {
		return unidad;
	}

	public void setUnidad(String unidad) {
		this.unidad = unidad;
	}

	public double getCostoPorUnidad() {
		return costoPorUnidad;
	}

	public void setCostoPorUnidad(double costoPorUnidad) {
		this.costoPorUnidad = costoPorUnidad;
	}

	public int getStock() {
		return stock;
	}

	public void setStock(int stock) {
		this.stock = stock;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Materiales nombre=")
				.append(nombre)
				.append(", unidad=")
				.append(unidad)
				.append(", costoPorUnidad=")
				.append(costoPorUnidad).append(", stock=");
		return builder.toString();
	}
	
	
	
}

*******************************************************************************
D:\Examen ud1\e241209. Ejercicio 1\src\main\java\capaNegocio\Pedido.java
-------------------------------------------------------------------------------
package capaNegocio;

import java.io.BufferedReader;
import java.io.FileReader;
import java.time.LocalDate;
import java.util.ArrayList;

public class Pedido implements Comparable<Pedido>{
	private int idCliente;
	private int idProducto;
	private int cantidad;
	private LocalDate fecha;
	
	public Pedido(int idCliente, int idProducto, int cantidad, LocalDate fecha) {
		this.idCliente = idCliente;
		this.idProducto = idProducto;
		this.cantidad = cantidad;
		this.fecha = fecha;
	}

	public int getIdCliente() {
		return idCliente;
	}

	public void setIdCliente(int idCliente) {
		this.idCliente = idCliente;
	}

	public int getIdProducto() {
		return idProducto;
	}

	public void setIdProducto(int idProducto) {
		this.idProducto = idProducto;
	}

	public int getCantidad() {
		return cantidad;
	}

	public void setCantidad(int cantidad) {
		this.cantidad = cantidad;
	}

	public LocalDate getFecha() {
		return fecha;
	}

	public void setFecha(LocalDate fecha) {
		this.fecha = fecha;
	}

	@Override
	public String toString() {
		return "Pedido [idCliente=" + idCliente + ", idProducto=" + idProducto + ", cantidad=" + cantidad + ", fecha="
				+ fecha + "]";
	}

	@Override
	public int compareTo(Pedido o) {
		return this.fecha.compareTo(o.fecha);
	}
	
	/**
	 * Método de la clase Pedido. En un pedido figura un producto.
	 * Este método busca el objeto Producto solicitado a partir de su identificador.
	 * @param inventario
	 * @return Devuelve el objeto Producto que se solicita en el pedido.
	 */
	private Productos getProducto(Inventario inventario) {
		Productos res = null;
		for (Productos producto : inventario.getProductos()) {
			if(producto.getId() == idProducto) {
				res = producto;
			}
		}
		
		return res;
	}
	
	/**
	 * Método que a partir de un producto solicitado y de la lista de materiales de 
	 * los que se dispone, indica si hay suficiente stock.
	 * Importante darse cuenta que en la instancia de esta clase (Pedido) figura
	 * el número de productos solicitados.
	 * @param productos
	 * @param materiales
	 * @return Indicativo de si hay stock para fabricar las unidades indicadas en 
	 * el pedido del producto a partir del stock.
	 */
	private boolean hayMateriales(Productos productos, ArrayList<Materiales> materiales){
		
		for(PiezasConstruccion pieza : productos.getPiezasConstruccion()) {
			for(Materiales material : materiales) {
				if(material.getNombre().equals(pieza.getMaterial()) &&
					material.getStock()	> pieza.getCantidad()){
					return true;
				}
			}
		}
		return false;
	}
	
	/**
	 * Una vez tramitado un pedido con éxito por tener stock suficiente, este método
	 * actualiza el stock de los materiales utilizados. 
	 * @param productos
	 * @param materiales
	 */
	private void actualizaMateriales(Productos productos, ArrayList<Materiales> materiales){
		
		for(PiezasConstruccion pieza : productos.getPiezasConstruccion()) {
			for(Materiales material : materiales) {
				if(material.getNombre().equals(pieza.getMaterial())){
					material.setStock(material.getStock() - pieza.getCantidad());
				}
			}
		}
		
		
	}

	// Ejercicio 1.c)		2 puntos
	// Los métodos que vienen a continuación pueden ser útiles para tramitar un pedido, pero 
	// no tienen por qué utilizarse. Se admite cualquier otra codificación siempre y cuando
	// resuelva el problema y los métodos tengan una cohesión alta.
	
	/**
	 * Tramitación de un pedido a partir del inventario (descripción de productos que se
	 * fabrican más lista de materiales disponibles).
	 * @param inventario
	 * @return indicativo de si se pudo tramitar o no el pedido.
	 */
	public boolean tramitar(Inventario inventario) {
		
		Productos producto = getProducto(inventario);
		
		if(hayMateriales(producto, inventario.getMateriales())) {
			actualizaMateriales(producto, inventario.getMateriales());
			return true;
		}
		return false;
		
	}
}

*******************************************************************************
D:\Examen ud1\e241209. Ejercicio 1\src\main\java\capaNegocio\PiezasConstruccion.java
-------------------------------------------------------------------------------
package capaNegocio;

public class PiezasConstruccion {

	private String material;
	private int cantidad;
	private String unidad;
	
	public PiezasConstruccion() {}
	
	public PiezasConstruccion(String material, int cantidad, String unidad) {
		this.material = material;
		this.cantidad = cantidad;
		this.unidad = unidad;
	}

	public String getMaterial() {
		return material;
	}

	public void setMaterial(String material) {
		this.material = material;
	}

	public int getCantidad() {
		return cantidad;
	}

	public void setCantidad(int cantidad) {
		this.cantidad = cantidad;
	}

	public String getUnidad() {
		return unidad;
	}

	public void setUnidad(String unidad) {
		this.unidad = unidad;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("PiezaConstruccion material=")
			   .append(material)
			   .append(", cantidad=")
			   .append(cantidad)
			   .append(", unidad=");
		return builder.toString();
	}
	
	
	
	
}

*******************************************************************************
D:\Examen ud1\e241209. Ejercicio 1\src\main\java\capaNegocio\Productos.java
-------------------------------------------------------------------------------
package capaNegocio;

import java.util.ArrayList;
import java.util.Arrays;

public class Productos {
	
	private int id;
	private String nombre;
	private ArrayList<PiezasConstruccion> piezasConstruccion;
	
	public Productos() {}
	
	public Productos(int id, String nombre, ArrayList<PiezasConstruccion> piezasConstruccion) {
		this.id = id;
		this.nombre = nombre;
		this.piezasConstruccion = piezasConstruccion;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getNombre() {
		return nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public ArrayList<PiezasConstruccion> getPiezasConstruccion() {
		return piezasConstruccion;
	}

	public void setPiezasConstruccion(ArrayList<PiezasConstruccion> piezas) {
		this.piezasConstruccion = piezas;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Producto id=")
				.append(id)
				.append(", nombre=")
				.append(nombre)
				.append(", piezasConstruccion=")
				.append(piezasConstruccion);
				
		return builder.toString();
	}

	
	
}
*******************************************************************************
D:\Examen ud1\e241209. Ejercicio 1\src\main\java\main\Main.java
-------------------------------------------------------------------------------
package main;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.NumberFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.fasterxml.jackson.databind.ObjectMapper;
import capaNegocio.*;

public class Main {

	private final static String FABRICA = "target/fabrica.json";
	private final static String PEDIDOS = "target/pedidos.txt";
	private final static String OUTPUT = "target/output.txt";
	
	// Ejercicio 1.a)		1 punto
	private static Inventario leerJson() {
		// Leer el fichero FABRICA y volcarlo a la clase Inventario.
		// Inventario deberá contener las clases necesarias para almacenar
		// el contenido especificado en el JSON.
		ObjectMapper om = new ObjectMapper();
		Inventario inventario = null;
		try {
			byte[] jsonData = Files.readAllBytes(Paths.get(FABRICA));
			inventario = om.readValue(jsonData, Inventario.class);
			
		} catch (IOException e) {
			System.err.println(e.getMessage());
		}
		return inventario;
	}
	
	// Ejercicio 1.b)		1 punto
	private static List<Pedido> LeerPedidos() {
		// Leer el fichero PEDIDOS y para cada línea, crear un Pedido y 
		// almacenarlo en un List<Pedido>. 
		// Ordenar los pedidos porque deben ordenarse de modo creciente
		// por fecha. Se hace con la siguiente instrucción. Los pedidos 
		// saben cómo ordenarse porque implementan la interfaz Comparable<Pedido>.
		List<Pedido> res = new ArrayList<Pedido>();
		Pedido pedido;
		try (BufferedReader br = new BufferedReader(new FileReader(new File(PEDIDOS)))) {
			String linea;
			int idCliente;
			int idProducto;
			int cantidad;
			LocalDate fecha;
			while ((linea = br.readLine()) != null) {
				idCliente =  Integer.parseInt(linea.split(":")[0]);
				idProducto = Integer.parseInt(linea.split(":")[1]);
				cantidad = Integer.parseInt(linea.split(":")[2]);
				fecha = LocalDate.parse(linea.split(":")[3]);
				pedido = new Pedido( idCliente, idProducto, cantidad, fecha);
				res.add(pedido);
			}
			
		} catch (FileNotFoundException e) {
			System.err.println(e.getMessage());
		} catch (IOException e) {
			System.err.println(e.getMessage());
		}
		Collections.sort(res);
		
		return res;
	}
	
	// Ejercicio 1.d)		1 punto
	public static void main(String[] args) {
		// Leer inventario del JSON.
		Inventario inventario = leerJson();
		// Leer pedidos del fichero de texto plano.
		List<Pedido> pedidos = LeerPedidos();
		
		// Para cada pedido intentar tramitarlo y grabar el resultado en OUTPUT.
		try (BufferedWriter bw = new BufferedWriter( new FileWriter(OUTPUT, true))) {
			
			for(Pedido pedido : pedidos) {
				
				if (pedido.tramitar(inventario)) {
					bw.write(pedido.toString() + "A sido tramitado");
					bw.newLine();
				}
				else {
					bw.write(pedido.toString() + "No se ha tramitado");
					bw.newLine();
				}
			}
			
		} catch (IOException e) {
			System.err.println(e.getMessage());
		}
		
	}
}

*******************************************************************************
D:\Examen ud1\e241209. Ejercicio 2\src\main\java\capaNegocio\Analisis.java
-------------------------------------------------------------------------------
package capaNegocio;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.Characters;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;

import org.xml.sax.SAXException;

public class Analisis {

	// Ejercicio 2.1 1 punto
	/**
	 * Usando JAXB, leer el fichero pom y obtener las dependencias especificadas.
	 * 
	 * @param ficheroPom
	 * @return Dependencias especificadas en el fichero pom.
	 */
	private List<Dependency> getDependencias(String ficheroPom) {

		List<Dependency> ListaDependencias = new ArrayList<Dependency>();
		try {
			JAXBContext contexto = JAXBContext.newInstance("capaNegocio");
			Unmarshaller unmarshaller = contexto.createUnmarshaller();
			Project datos = (Project) unmarshaller.unmarshal(new File(ficheroPom));

			for (Dependency dependencia : datos.getDependencies().getDependency()) {
				ListaDependencias.add(dependencia);
			}
		} catch (JAXBException e) {
			System.err.println(e.getMessage());
		}
		return ListaDependencias;
	}

	// Ejercicio 2.2 1,5 puntos
	/**
	 * A partir del fichero xml de vulnerabilidades, se devuelven en formato
	 * lista<Library>
	 * 
	 * @param vulnerabilidades
	 * @return lista de instancias Library con las vulverabilidades especificadas en
	 *         el fichero xml.
	 */
	private List<Library> getLibrary(String fileVulnerabilidades) {

		List<Library> ListaVulnerabilidades = new ArrayList<Library>();
		Library vulneabilidad = null;
		XMLInputFactory factory = XMLInputFactory.newInstance();
		XMLEventReader eventReader = null;
		try {
			eventReader = factory.createXMLEventReader(new FileInputStream(fileVulnerabilidades));
			while (eventReader.hasNext()) {
				XMLEvent event = eventReader.nextEvent();
				if (event.isStartElement()) {
					StartElement startElement = event.asStartElement();
					String tagName = startElement.getName().getLocalPart();
					// cuando el tagName sea name
					if (tagName.equals("name")) {
						vulneabilidad = new Library();
						event = eventReader.nextEvent();
						if (event instanceof Characters) {
							// añado el nombre al objeto vulnerabilidad que cree
							vulneabilidad.setNombre(event.asCharacters().getData());
						}
						// cuando el tagName sea version
					} else if (tagName.equals("version")) {
						event = eventReader.nextEvent();
						if (event instanceof Characters) {
							// añado la vesion al objeto vulnerabilidad que cree
							vulneabilidad.setVersion(event.asCharacters().getData());
						}
					}
				}
				if (event.isEndElement()) {
					EndElement endElement = event.asEndElement();
					// cuando la etiqueta de cierre indique que ya se cierra la etiqueta library
					// podemos añadir el elemento a la lista
					if (endElement.getName().getLocalPart().equals("library")) {
						ListaVulnerabilidades.add(vulneabilidad);
					}
				}
			}
		} catch (FileNotFoundException e) {
			System.out.println("Archivo XML no encontrado: " + e.getMessage());
		} catch (XMLStreamException e) {
			System.out.println("Error al procesar el XML: " + e.getMessage());
		} finally {
			if (eventReader != null)
				try {
					eventReader.close();
				} catch (XMLStreamException e) {
					System.out.println(e.getMessage());
				}
		}
		return ListaVulnerabilidades;
	}

	// Ejercicio 2.3 1 punto
	/**
	 * A partir de las dependencias de la aplicación y de las librerías que
	 * contienen las vulnerabilidades se indica si la aplicación es vulnerable o no.
	 * 
	 * @param dependencia Dependencias de la aplicación.
	 * @param librerias   Librerías que presentan vulnerabilidades.
	 * @return indicativo de si la aplicación es vulnerable.
	 */
	private boolean esVulnerable(Dependency dependencia, List<Library> vulnerabilidades) {

		for (Library vulnerabilidad : vulnerabilidades) {
			if (vulnerabilidad.getNombre().equals(dependencia.getArtifactId())
					&& vulnerabilidad.getVersion().equals(dependencia.getVersion())) {
				return true;
			}
		}
		return false;
	}

	// Ejercicio 2.4 1,5 puntos
	/**
	 * A partir de las dependencias de la aplicación y de las vulnerabilidades,
	 * cuando una dependencia presenta una vulnerabilidad, se añade a un mapa. Dado
	 * que una dependencia puede tener más de una vulnerabilidad, se registran en
	 * una lista.
	 * 
	 * @param librerias
	 * @param dependencias
	 * @return Mapa con las dependencias y una lista de sus vulnerabilidades.
	 */
	private HashMap<String, List<String>> getVulnerabilidades(List<Dependency> dependencias,
			List<Library> vulnerabilidades) {

		HashMap<String, List<String>> map = new HashMap<String, List<String>>();
		List<String> versiones = null;

		for (Dependency dependencia : dependencias) {

			if (esVulnerable(dependencia, vulnerabilidades)) {
				if (map.containsKey(dependencia.getArtifactId())) {
					map.get(dependencia.getArtifactId()).add(dependencia.getVersion());
				} else {
					versiones = new ArrayList<String>();
					versiones.add(dependencia.getVersion());
					map.put(dependencia.getArtifactId(), versiones);
				}
			}

		}
		return map;
	}

	public Map<String, List<String>> verificar(String ficheroPom, String vulnerabilidades) {
		List<Dependency> dependencias = getDependencias(ficheroPom);
		List<Library> libraries = getLibrary(vulnerabilidades);

		return getVulnerabilidades(dependencias, libraries);
	}
}

*******************************************************************************
